{
	"info": {
		"_postman_id": "d43e0006-5486-45e4-a652-22f99999a70a",
		"name": "DWES06 Laravel Gateway - Spring Boot Microservice",
		"description": "# üöÄ Las consultas\n\nEn este archivo de ejemplo encontrar√°s las consultas HTTP b√°sicas necesarias para completar la Tarea Evaluativa 1 de la Unidad Did√°ctica 6 de DWES. El ejemplo est√° basado en una aplicaci√≥n de un almac√©n de productos de una ambulancia de emergencias, en la que podr√°s realizar operaciones CRUD sobre productos y categor√≠as.\n\nDesde Postman se hacen las peticiones a un aplicaci√≥n gateway realizada en Laravel, y est√° se conecta a un microservicio de Spring Boot.\n\nüîç **¬øQu√© puedes hacer?**  \nCon esta colecci√≥n, podr√°s ejecutar las operaciones b√°sicas de un sistema REST para gestionar los productos y categor√≠as de un almac√©n.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34019719"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get all Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Product By Idd",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Producto Nuevo {{$randomLoremWords}} {{$randomProduct}}\",\n    \"stock_actual\": {{random_stock_actual}},\n    \"stock_minimo\": {{random_stock_minimo}},\n    \"id_categoria\": {{random_id_categoria}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Producto Actualizado {{$randomLoremWords}} {{$randomProduct}}\",\n    \"stock_actual\": {{random_stock_actual}},\n    \"stock_minimo\": {{random_stock_minimo}},\n    \"id_categoria\": {{random_id_categoria}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/products/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"{{id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get Products Under Min Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/products/min",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"products",
								"min"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get all Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by ID Category",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/categories/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Categor√≠a Nueva {{$randomInt}} {{$randomInt}}\",\r\n    \"descripcion\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nombre\": \"Categor√≠a Actualizada {{$randomInt}} {{$randomInt}}\",\r\n    \"descripcion\": \"{{$randomLoremText}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/categories/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/categories/{{id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"categories",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generar un stock actual aleatorio.\r",
					"pm.environment.set(\r",
					"    \"random_stock_actual\",\r",
					"    _.random(0, 25)\r",
					");\r",
					"\r",
					"// Generar un stock m√≠nimo aleatorio.\r",
					"pm.environment.set(\r",
					"    \"random_stock_minimo\",\r",
					"    _.random(1, 25)\r",
					");\r",
					"\r",
					"// Generar un id de categor√≠a aleatorio.\r",
					"pm.environment.set(\r",
					"    \"random_id_categoria\", _.random(1,6)\r",
					");\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		}
	]
}